version: 2.1

orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2

workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
    jobs:
      - build-and-test

jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.9 container
    # Change the version below to your required version of python
    docker:
      - image: circleci/python:3.9
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    environment: SECRET_KEY=secret
      DEBUG=1
      DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 0.0.0.0 [::1]
      DJANGO_CORS_ALLOWED_ORIGINS=^http://localhost.*$
      SQL_ENGINE=django.db.backends.postgresql
      SQL_DATABASE=db
      SQL_USER=postgres
      SQL_PASSWORD=postgres
      SQL_HOST=db
      SQL_PORT=5432
      DATABASE=postgres
      JWT_AUDIENCE=http://localhost/graphql/
      JWT_ISSUER=issuer.auth0.com
      JWT_CLIENT_ID=client-id
      JWT_CLIENT_SECRET=super-secret

    resource_class: small
    steps:
      - checkout
      - run:
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r backend/requirements/development.txt
      - run:
          name: Run tests
          # This assumes pytest is installed via the install-package step above
          command: |
            . venv/bin/activate
            pytest backend
